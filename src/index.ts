import { config } from "dotenv";
import { CallbackQuery, Message } from "node-telegram-bot-api";

const TelegramBot = require("node-telegram-bot-api");

// –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
// const {
//   voiceAnswers,
//   videoAnswers,
//   audioAnswers,
//   contactAnswers,
//   locationAnswers,
//   photoAnswers,
//   videoNoteAnswers,
//   stickerAnswers,
// } = require("./src/toxicAnswers");

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞
const envConfig = config().parsed;
if(!envConfig) {
  throw new Error('–§–∞–π–ª .env –ø—É—Å—Ç–æ–π');
}
const TOKEN = envConfig['TOKEN']

if(!TOKEN){
  throw new Error('–ö–ª—é—á –≤ —Ñ–∞–π–ª–µ .env –Ω–µ –Ω–∞–π–¥–µ–Ω');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, { polling: true });

// admin username
const ADMIN_USERNAME = "ker4ik13";
const ADMIN_CHAT_ID = 785206267;

// –ö–æ–º–∞–Ω–¥—ã
const commadns = bot.setMyCommands([
  { command: "/start", description: "–°—Ç–∞—Ä—Ç" },
  { command: "/menu", description: "–ú–µ–Ω—é" },
  { command: "/info", description: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –æ–±–æ –º–Ω–µ" },
  { command: "/portfolio", description: "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ" },
  { command: "/ask", description: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" },
  { command: "/contacts", description: "–ö–æ–Ω—Ç–∞–∫—Ç—ã" },
]);

// Menu
const menuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data: "/portfolio" },
        { text: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data: "/contacts" },
      ],
      [
        { text: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: "/ask" },
        { text: "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data: "/order" },
      ],
      [{ text: "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–æ –º–Ω–µ", callback_data: "/info" }],
    ],
  },
};

const portfolioKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: "Dixie Palms", url: "https://dixie-palms.vercel.app/" }],
      [{ text: "–ù–∞–∑–∞–¥", callback_data: "/menu" }],
    ],
  },
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
const orderKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "–î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞", callback_data: "#design" },
        { text: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞", callback_data: "#website" },
      ],
      [
        { text: "–†–∞–∑—Ä–∞–±–æ—Ç–∞ —á–∞—Ç-–±–æ—Ç–∞", callback_data: "#chat-bot" },
        { text: "–î–∏–∑–∞–π–Ω + —Å–∞–π—Ç", callback_data: "#design+site" },
      ],
    ],
  },
};

const start = async (chatId: number, name: string) => {
  const returnText = `–ü—Ä–∏–≤–µ—Ç ${name}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –º–æ–µ–º —É–≥–æ–ª–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! –Ø - –ö–∏—Ä–∏–ª–ª, Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —É–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ! üöÄ\n–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`;
  return await bot.sendMessage(chatId, returnText, menuKeyboard);
};

const info = async (chatId: number, userName: string) => {
  return await bot.sendMessage(
    chatId,
    "–±—Ä–∞—Ç, –Ω–∞–¥–æ –±—ã –¥–æ—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /info",
    menuKeyboard,
  );
};

// const spam = async (chatId) => {
//   const dimaId = "dsabdas";
//   try {
//     await bot.sendMessage(dimaId, "–î–∏–º–∞ –ª–æ—Ö –±–ª—è –∂–∏–µ—Å");
//     return await bot.sendMessage(
//       chatId,
//       `–°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dimaId} –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ`,
//     );
//   } catch (error) {
//     console.log(error);
//     return await bot.sendMessage(
//       chatId,
//       `–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –°–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ${dimaId} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –û—à–∏–±–∫–∞: ${error}`,
//     );
//   }
// };

const order = async (chatId: number) => {
  return await bot.sendMessage(
    chatId,
    "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
    orderKeyboard,
  );
};

const sendOrder = async (userName: string, chatId: number, product: string) => {
  const result = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userName} —Å–¥–µ–ª–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞:\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${userName}\n<b>–ß–∞—Ç id:</b> ${chatId}\n<b>–ü—Ä–æ–¥—É–∫—Ç:</b> ${product}`;
  await bot.sendMessage(ADMIN_CHAT_ID, result, { parse_mode: "HTML" });
};

bot.on("message", async (message: Message) => {
  const chatId = message.chat.id;
  const text = message.text;
  const audio = message.audio;
  const video = message.video;
  const photo = message.photo;
  const voice = message.voice;
  const videoNote = message.video_note;
  const contact = message.contact;
  const location = message.location;
  const sticker = message.sticker;
  const userName = message.chat.username;
  const firstName = message.chat.first_name;

  switch (text) {
    case "/start":
      return start(chatId, firstName);

    case "/menu":
      return await bot.sendMessage(chatId, "–ú–µ–Ω—é", menuKeyboard);

    case "/portfolio":
      return await bot.sendMessage(chatId, "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", portfolioKeyboard);

    case "/info":
      return info(chatId, userName);

    case "/order":
      return order(chatId);

    default:
      return start(chatId, userName);
  }
});

bot.on("callback_query", async (message: CallbackQuery) => {
  const data = message.data;
  const chatId = message.message?.chat.id;
  const userName = message.message?.chat.username;
  const firstName = message.message?.chat.first_name;

  switch (data) {
    case "/start":
      return start(chatId, firstName);

    case "/menu":
      return await bot.sendMessage(chatId, "–ú–µ–Ω—é", menuKeyboard);

    case "/portfolio":
      return await bot.sendMessage(chatId, "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", portfolioKeyboard);

    case "/info":
      return info(chatId, userName);

    case "/order":
      return order(chatId);

    case "#design":
      await sendOrder(userName, chatId, "–î–∏–∑–∞–π–Ω");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
      );

    case "#website":
      await sendOrder(userName, chatId, "–í–µ–±-—Å–∞–π—Ç");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
      );

    case "#chat-bot":
      await sendOrder(userName, chatId, "–ß–∞—Ç-–±–æ—Ç");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
      );

    case "#design+site":
      await sendOrder(userName, chatId, "–î–∏–∑–∞–π–Ω + —Å–∞–π—Ç");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
      );

    default:
      return start(chatId, userName);
  }
});
