const { config } = require("dotenv");

const TelegramBot = require("node-telegram-bot-api");

// –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–æ–≤
// const {
//   voiceAnswers,
//   videoAnswers,
//   audioAnswers,
//   contactAnswers,
//   locationAnswers,
//   photoAnswers,
//   videoNoteAnswers,
//   stickerAnswers,
// } = require("./src/toxicAnswers");

// –ò–º–ø–æ—Ä—Ç –∫–æ–Ω—Ñ–∏–≥–∞
const envConfig = config().parsed;
if (!envConfig) {
  throw new Error("–§–∞–π–ª .env –ø—É—Å—Ç–æ–π");
}
const TOKEN = envConfig["TOKEN"];

if (!TOKEN) {
  throw new Error("–ö–ª—é—á –≤ —Ñ–∞–π–ª–µ .env –Ω–µ –Ω–∞–π–¥–µ–Ω");
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(TOKEN, { polling: true });

// admin username
const ADMIN_USERNAME = "ker4ik13";
const ADMIN_CHAT_ID = 785206267;

// –ö–æ–º–∞–Ω–¥—ã
const commadns = bot.setMyCommands([
  { command: "/menu", description: "–ú–µ–Ω—é" },
  { command: "/portfolio", description: "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ" },
  { command: "/ask", description: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å" },
  { command: "/contacts", description: "–ö–æ–Ω—Ç–∞–∫—Ç—ã" },
]);

const states = {
  menu: "menu",
  portfolio: "portfolio",
  contacts: "contacts",
  ask: "ask",
  order: "order",
};

const userState = {
  chatId: "",
  state: states.menu,
};

let userStates = [];

const findUser = (chatId) => {
  let user = "";
  let index = "not found";
  for (let i = 0; i < userStates.length; i++) {
    if (userStates[i].chatId === chatId) {
      user = userStates[i].chatId;
      index = i;
      break;
    }
  }
  if (user) {
    return {
      userChatId: chatId,
      userIndex: index,
    };
  } else {
    return false;
  }
};

const setUserState = (chatId, state) => {
  const user = findUser(chatId);

  if (user) {
    for (let i = 0; i < userStates.length; i++) {
      if (userStates[i].chatId === chatId) {
        userStates[i].state = state;
      }
    }
  } else {
    userStates.push({
      chatId: chatId,
      state: state,
    });
  }
  console.log(user);
  console.log(userStates);
};

// Menu
const menuKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", callback_data: "/portfolio" },
        { text: "–ö–æ–Ω—Ç–∞–∫—Ç—ã", callback_data: "/contacts" },
      ],
      [
        { text: "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å", callback_data: "/ask" },
        { text: "–°–¥–µ–ª–∞—Ç—å –∑–∞–∫–∞–∑", callback_data: "/order" },
      ],
    ],
  },
};

const portfolioKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [{ text: "Dixie Palms", url: "https://dixie-palms.vercel.app/" }],
      [{ text: "–ù–∞–∑–∞–¥", callback_data: "/menu" }],
    ],
  },
};

// –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –∑–∞–∫–∞–∑–∞
const orderKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "–î–∏–∑–∞–π–Ω —Å–∞–π—Ç–∞", callback_data: "#design" },
        { text: "–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞", callback_data: "#website" },
      ],
      [
        { text: "–†–∞–∑—Ä–∞–±–æ—Ç–∞ —á–∞—Ç-–±–æ—Ç–∞", callback_data: "#chat-bot" },
        { text: "–î–∏–∑–∞–π–Ω + —Å–∞–π—Ç", callback_data: "#design+site" },
      ],
    ],
  },
};

const contactsKeyboard = {
  reply_markup: {
    inline_keyboard: [
      [
        { text: "VK", url: "https://vk.com/random_4el" },
        { text: "TG", url: "https://t.me/ker4ik13" },
        { text: "TG Channel", url: "https://t.me/kireev_dev" },
      ],
      [
        { text: "GitHub", url: "https://github.com/ker4ik13" },
        { text: "Twitter", url: "https://twitter.com/kireev_dev" },
      ],
      [{ text: "–ù–∞–∑–∞–¥", callback_data: "/menu" }],
    ],
  },
};

const askKeyboard = {
  reply_markup: {
    inline_keyboard: [[{ text: "–ù–∞–∑–∞–¥", callback_data: "/menu" }]],
  },
};

const start = async (chatId, name) => {
  setUserState(chatId, states.menu);

  const returnText = `–ü—Ä–∏–≤–µ—Ç ${name}, —Ä–∞–¥ –≤–∏–¥–µ—Ç—å —Ç–µ–±—è –≤ –º–æ–µ–º —É–≥–æ–ª–∫–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏! –Ø - –ö–∏—Ä–∏–ª–ª, Frontend —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫. –° –º–æ–µ–π –ø–æ–º–æ—â—å—é —Ç—ã —Å–º–æ–∂–µ—à—å –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å –º–æ–∏–º–∏ –ø—Ä–æ–µ–∫—Ç–∞–º–∏, —É–¥–æ–±–Ω–æ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑ –∏–ª–∏ –∑–∞–¥–∞—Ç—å –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å. –î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º —á—Ç–æ-—Ç–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–µ –∏ –ø–æ–ª–µ–∑–Ω–æ–µ! üöÄ\n–ú–æ–∂–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏.`;
  state = states.menu;
  return await bot.sendMessage(chatId, returnText, menuKeyboard);
};

const menu = async (chatId) => {
  setUserState(chatId, states.menu);

  return await bot.sendMessage(chatId, "–ú–µ–Ω—é", menuKeyboard);
};

const order = async (chatId) => {
  setUserState(chatId, states.order);

  return await bot.sendMessage(
    chatId,
    "–ö–∞–∫–æ–π –ø—Ä–æ–¥—É–∫—Ç –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å?",
    orderKeyboard,
  );
};

const sendOrder = async (userName, chatId, product) => {
  const result = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userName} —Å–¥–µ–ª–∞–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑! –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–∫–∞–∑–∞:\n\n<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> @${userName}\n<b>–ß–∞—Ç id:</b> ${chatId}\n<b>–ü—Ä–æ–¥—É–∫—Ç:</b> ${product}`;

  setUserState(chatId, states.menu);

  return await bot.sendMessage(ADMIN_CHAT_ID, result, { parse_mode: "HTML" });
};

const contacts = async (chatId) => {
  setUserState(chatId, states.contacts);

  return await bot.sendMessage(
    chatId,
    "–ú–æ–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã. –ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è",
    contactsKeyboard,
  );
};

const portfolio = async (chatId) => {
  setUserState(chatId, states.portfolio);

  return await bot.sendMessage(chatId, "–ü–æ—Ä—Ç—Ñ–æ–ª–∏–æ", portfolioKeyboard);
};

const ask = async (chatId) => {
  setUserState(chatId, states.ask);

  // return await bot.sendMessage(
  //   chatId,
  //   "–ö–æ–º–∞–Ω–¥–∞ /ask –≤—Ä–µ–º–µ–Ω–Ω–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç",
  //   menuKeyboard,
  // );

  return await bot.sendMessage(
    chatId,
    "–ó–∞–¥–∞–π—Ç–µ –ª—é–±–æ–π –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π –≤–∞—Å –≤–æ–ø—Ä–æ—Å –∏ —è —Å–≤—è–∂—É—Å—å —Å –≤–∞–º–∏ –ø–æ–∑–∂–µ",
    askKeyboard,
  );
};

const askSend = async (chatId, userName, userMessage) => {
  setUserState(chatId, states.menu);

  const message = `–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å @${userName} –∑–∞–¥–∞–ª –≤–æ–ø—Ä–æ—Å:\n\n"${userMessage}"`;

  await bot.sendMessage(ADMIN_CHAT_ID, message);

  return await bot.sendMessage(
    chatId,
    "–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ. –°–ø–∞—Å–∏–±–æ –∑–∞ –≤–æ–ø—Ä–æ—Å, –æ–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞.",
    menuKeyboard,
  );
};

bot.on("message", async (message) => {
  const chatId = message.chat.id;
  const text = message.text;
  const audio = message.audio;
  const video = message.video;
  const photo = message.photo;
  const voice = message.voice;
  const videoNote = message.video_note;
  const contact = message.contact;
  const location = message.location;
  const sticker = message.sticker;
  const userName = message.chat.username;
  const firstName = message.chat.first_name;

  switch (text) {
    case "/start":
      return await start(chatId, firstName);

    case "/menu":
      return await menu(chatId);

    case "/portfolio":
      return await portfolio(chatId);

    case "/order":
      return await order(chatId);

    case "/contacts":
      return await contacts(chatId);

    case "/ask":
      return await ask(chatId);

    default:
      const user = findUser(chatId);

      if (user && userStates[user.userIndex].state === states.ask) {
        return await askSend(chatId, userName, text);
      } else {
        return await menu(chatId);
      }
  }
});

bot.on("callback_query", async (message) => {
  const data = message.data;
  const chatId = message.message?.chat.id;
  const userName = message.message?.chat.username;
  const firstName = message.message?.chat.first_name;

  switch (data) {
    case "/start":
      return await start(chatId, firstName);

    case "/menu":
      return await menu(chatId);

    case "/portfolio":
      return await portfolio(chatId);

    case "/order":
      return await order(chatId);

    case "/contacts":
      return await contacts(chatId);

    case "/ask":
      return await ask(chatId);

    case "#design":
      await sendOrder(userName, chatId, "–î–∏–∑–∞–π–Ω");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        menuKeyboard,
      );

    case "#website":
      await sendOrder(userName, chatId, "–í–µ–±-—Å–∞–π—Ç");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        menuKeyboard,
      );

    case "#chat-bot":
      await sendOrder(userName, chatId, "–ß–∞—Ç-–±–æ—Ç");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        menuKeyboard,
      );

    case "#design+site":
      await sendOrder(userName, chatId, "–î–∏–∑–∞–π–Ω + —Å–∞–π—Ç");
      return await bot.sendMessage(
        chatId,
        "–ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞. –ù–∞–ø–∏—à–∏—Ç–µ @ker4ik13 –ø–æ –ø–æ–≤–æ–¥—É –∑–∞–∫–∞–∑–∞, –ª–∏–±–æ –∂–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
        menuKeyboard,
      );

    default:
      return await start(chatId, userName);
  }
});
